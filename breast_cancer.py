# -*- coding: utf-8 -*-
"""Ultimate classification model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lwUiOPsRmSL9luP0qJJExLzTT2lW9hj3
"""

import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, accuracy_score

"""Importing dataset"""

dataset=pd.read_csv('Data.csv')
x=dataset.iloc[:,:-1].values
y=dataset.iloc[:,-1].values

"""Splitting dataset in to train and test set"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)

"""Feature Scaling"""

sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.fit_transform(x_test)

"""Trsining the Selected model on dataset"""

def modelsel(name,x_train,y_train,key,op):
  
  if name=='1':
    print('# knn in action\n')
    classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
    classifier.fit(x_train,y_train)
  elif name=='2':
    print('# logistic regression in action \n')
    classifier=LogisticRegression(random_state=0)
    classifier.fit(x_train,y_train)
  elif name=='3':
    print('# Decision tree classifier in action\n')
    classifier=DecisionTreeClassifier(criterion='entropy',random_state=0)
    classifier.fit(x_train,y_train)
  elif name=='4':
    print('# Support Vector Machine in action \n')
    classifier=SVC(kernel='rbf',random_state=0)
    classifier.fit(x_train,y_train)
  elif name=='5':
    print('# Random forest Classifier in action \n')
    classifier=RandomForestClassifier(n_estimators=100,criterion='entropy',random_state=0)
    classifier.fit(x_train,y_train)
  #Checking the accuracy 
  if op=="2":
    print("\n # enter all the features")
    for i in range(10):
      key[0].append(input())
    y_pred = classifier.predict(sc.transform(key))
    print("\n entered featurs:- ",key)
    print("\n # Showing the prediction by selected model:-\n")
    print("Class ",*y_pred,)
  else:
    print("\n # Showing the accuracy of the selected model:- \n")
    y_pred = classifier.predict(x_test)
    cm = confusion_matrix(y_test, y_pred)
    print('confusion matrix:- \n',cm,'\n')
    acc=accuracy_score(y_test, y_pred)
    print('accuracy = ',acc)

"""Calling the function"""

print('# enter the model number eg:- (1) \n 1) knn \n 2) logistic_Regression \n 3) decision_tree \n 4) SVM \n 5) Random_Forest \n')
model=input()
print('# enter the operation number eg:- (2)\n 1) Accuracy of selected model \n 2) Perdict the class of cancer by entering all the features \n')
#key=[[888820,5,10,10,3,7,3,8,10,2]]
key=[[]]

operation=input()
modelsel(model,x_train,y_train,key,operation)
